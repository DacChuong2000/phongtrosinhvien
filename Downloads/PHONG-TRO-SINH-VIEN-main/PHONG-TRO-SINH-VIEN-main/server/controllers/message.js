const db = require("../models")
const asyncHandler = require("express-async-handler")
const { Op, Sequelize } = require("sequelize")
const { v4 } = require("uuid")

const handleMessage = asyncHandler(async (res, { content, data }) => {
  let response = []
  switch (content) {
    case "GET_STARTED":
      response = [
        { text: "Ph√≤ng tr·ªç sinh vi√™n xin ch√†o!" },
        { text: `Ch√†o m·ª´ng b·∫°n ƒë·∫øn thƒÉm website c·ªßa ch√∫ng t√¥i ~ ‚ú®‚ú®‚ú®` },
        { text: `Tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu xin ph√©p cho web h·ªèi t√™n c·ªßa b·∫°n l√† g√¨?`, code: "ASK_NAME" },
      ]
      break
    case "ASK_NAME":
      response = [{ text: `Hi, ${data.userText}!` }, { text: `B·∫°n mu·ªën t√¨m ki·∫øm ·ªü khu v·ª±c n√†o?`, code: "address" }]
      break
    case "address":
      response = [
        {
          text: `B·∫°n mu·ªën ƒë∆∞·ª£c gi√∫p ƒë·ª° t√¨m ki·∫øm v·ªÅ v·∫•n ƒë·ªÅ n√†o?`,
          options: [
            { id: v4(), value: "TIM_TRO", label: "T√¨m tr·ªç ph√π h·ª£p" },
            { id: v4(), value: "TIM_O_GHEP", label: "T√¨m ng∆∞·ªùi ·ªü gh√©p" },
            // { id: v4(), value: "KHAC", label: "Kh√°c" },
          ],
        },
      ]
      break
    case "TIM_TRO":
      response = [
        {
          code: "price",
          text: "Vui l√≤ng cho Bot bi·∫øt ng√¢n s√°ch h√†ng th√°ng c·ªßa b·∫°n ƒë·ªÉ Bot c√≥ th·ªÉ t√¨m ki·∫øm c√°c l·ª±a ch·ªçn ph√π h·ª£p?",
        },
      ]
      break
    case "price":
    case "ASK_OPTION":
      response = [
        {
          text: "Ngo√†i ra b·∫°n c√≤n c·∫ßn th√™m y√™u c·∫ßu n√†o kh√°c d∆∞·ªõi ƒë√¢y kh√¥ng?",
          options: [
            { id: v4(), label: "Di·ªán t√≠ch ch·ªó thu√™", value: "AREA" },
            { id: v4(), label: "Ch·∫•t l∆∞·ª£ng", value: "STAR" },
            { id: v4(), label: "Th√™m th√¥ng tin kh√°c", value: "DESCRIPTION" },
          ],
        },
      ]
      break
    case "AREA":
      response = [{ text: "Vui l√≤ng nh·∫≠p di·ªán t√≠ch m√† b·∫°n mong mu·ªën (m2)?", code: "area" }]
      break
    case "DESCRIPTION":
      response = [{ text: "Vui l√≤ng nh·∫≠p th√™m m√¥ t·∫£ m√† b·∫°n mong mu·ªën?", code: "description" }]
      break
    case "STAR":
      response = [{ text: "Vui l√≤ng nh·∫≠p s·ªë sao t·ªëi thi·ªÉu m√† b·∫°n mu·ªën (1‚≠ê - 5‚≠ê)?", code: "star" }]
      break
    case "area":
    case "description":
    case "star":
      response = [
        {
          selects: {
            id: v4(),
            title: "B·∫°n c·∫ßn th√™m ho·∫∑c s·ª≠a y√™u c·∫ßu kh√¥ng?",
            btns: [
              { value: "ASK_OPTION", label: "Th√™m y√™u c·∫ßu" },
              { value: "SEARCH", label: "T√¨m ki·∫øm" },
            ],
          },
        },
      ]
      break
    case "SEARCH":
      const { description, address, price, area, star, target } = data
      const queries = {}
      if (description) queries.description = { [Op.substring]: description }
      if (address) queries.address = Sequelize.where(Sequelize.fn('LOWER', Sequelize.col('address')), 'LIKE', '%' + address.toLowerCase() + '%')
      if (target) queries.target = target
      if (star) {
        const formatedStar = star.match(/\d+/g)
        if (formatedStar.length === 1 && (star.includes("l·ªõn") || star.includes("tr√™n"))) queries.star = { [Op.gte]: Number(formatedStar[0]) }
        else if (formatedStar.length === 1 && (star.includes("nh·ªè") || star.includes("d∆∞·ªõi"))) queries.star = { [Op.lte]: Number(formatedStar[0]) }
        else if (formatedStar.length > 1) {
          const arr = formatedStar?.map((el) => Number(el))
          queries.star = { [Op.between]: [arr[0], arr[1]] }
        } else queries.star = Number(formatedStar[0])
      }
      if (price) {
        const formatedPrice = price.match(/\d+/g)
        const unit = price.includes("tri·ªáu") ? 1000000 : 1
        if (formatedPrice.length === 1 && ( price.includes("l·ªõn")||  price.includes("tr√™n")))
          queries.price = { [Op.gte]: Number(formatedPrice[0]) * unit }
        else if (formatedPrice.length === 1 && (price.includes("nh·ªè") || price.includes("d∆∞·ªõi")))
          queries.price = { [Op.lte]: Number(formatedPrice[0]) * unit }
        else if (formatedPrice.length > 1) {
          const arr = formatedPrice?.map((el) => Number(el) * unit)
          queries.price = { [Op.between]: [arr[0], arr[1]] }
        } else queries.price = Number(formatedPrice[0] * unit)
      }
      if (area) {
        const formatedArea = area.match(/\d+/g)
        if (formatedArea.length === 1 && (area.includes("l·ªõn") || area.includes("tr√™n"))) queries.area = { [Op.gte]: Number(formatedArea[0]) }
        else if (formatedArea.length === 1 && (area.includes("nh·ªè") || area.includes("d∆∞·ªõi"))) queries.area = { [Op.lte]: Number(formatedArea[0]) }
        else if (formatedArea.length > 1) {
          const arr1 = formatedArea?.map((el) => Number(el))
          queries.area = { [Op.between]: [arr1[0], arr1[1]] }
        } else queries.area = Number(formatedArea[0])
      }
  
      const result = await db.Post.findAll({ where: queries, limit: 10, order: [["star", "DESC"]] })
      if (result && result.length > 0) {
        response = [
          {
            className: "list-post",
            postcard: result.map((el) => ({
              id: el.id,
              title: el.title,
              description: el.description,
              image: el.images[0],
              btns: [{ value: "DETAIL", label: "Xem chi ti·∫øt", end: true }],
            })),
          },
        ]
      } else
        response = [
          {
            text: "R·∫•t ti·∫øc hi·ªán t·∫°i Bot kh√¥ng t√¨m th·∫•y ch·ªó ngh·ªâ n√†o th·ªèa m√£n t·∫•t c·∫£ c√°c y√™u c·∫ßu c·ªßa b·∫°n ü•∫. Vui l√≤ng RESET l·∫°i y√™u c·∫ßu v√† t√¨m l·∫°i nh√©!",
          },
        ]

      break
    case "TIM_O_GHEP":
      response = [
        {
          text: "ƒê·ªëi t∆∞·ª£ng b·∫°n mu·ªën ·ªü gh√©p l√†?",
          options: [
            { id: v4(), value: "TIM_TRO", label: "Nam" },
            { id: v4(), value: "TIM_TRO", label: "N·ªØ" },
            { id: v4(), value: "TIM_TRO", label: "T·∫•t c·∫£" },
          ],
          filterCode: "target",
        },
      ]
      break
    case "KHAC":
      response = []
      break
    default:
      response = [{ text: "L·ª±a ch·ªçn n√†y ch√∫ng t√¥i ch∆∞a c·∫≠p nh·∫≠t, vui l√≤ng ch·ªçn c√°c option kh√°c nh√© ‚ù§Ô∏è" }]
      break
  }
  return res.json({
    success: true,
    messages: response,
  })
})
const endpoint = asyncHandler((req, res) => {
  const { type, content, data } = req.body
  const defautText = "Thao t√°c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng th·ª≠ l·∫°i"
  if (type === "MESSAGE") return handleMessage(res, { content, data })
  return res.json({
    success: false,
    mes: defautText,
  })
})

module.exports = {
  endpoint,
}
